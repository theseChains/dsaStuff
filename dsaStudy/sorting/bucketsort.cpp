#include "sorting.h"

// where as counting sort assumes that the input consists of integers in a small range
// bucket sort assumes that the input is generated by a random process that distributes
// elements uniformly and independently over the interval [0, 1)

void bucketSort(std::array<double, util::arraySize>& numbers)
{
	// an array of linked lists (buckets)
	std::vector<double> buckets[util::arraySize]{};

	for (int i{ 0 }; i < util::arraySize; ++i)
	{
		int bucketIndex{ static_cast<int>(util::arraySize * numbers[i]) };
		buckets[bucketIndex].push_back(numbers[i]);
	}

	for (int i{ 0 }; i < util::arraySize; ++i)
	{
		std::sort(std::begin(buckets[i]), std::end(buckets[i]));
	}

	int index{ 0 };
	for (int i{ 0 }; i < util::arraySize; ++i)
	{
		for (int j{ 0 }; j < buckets[i].size(); ++j)
		{
			numbers[index++] = buckets[i][j];
		}
	}
}
